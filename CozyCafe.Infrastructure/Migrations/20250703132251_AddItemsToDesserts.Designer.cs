// <auto-generated />
using System;
using CozyCafe.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CozyCafe.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250703132251_AddItemsToDesserts")]
    partial class AddItemsToDesserts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Десерти"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Основні страви"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Закуски"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Напої"
                        });
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            CategoryId = 1,
                            Description = "Класичний французький перевернутий яблучний пиріг із карамеллю.",
                            ImageUrl = "/images/deserts/dessert1.jpg",
                            Name = "Tarte Tatin",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 102,
                            CategoryId = 1,
                            Description = "Листковий торт із кремом патисьєр та ніжною текстурою.",
                            ImageUrl = "/images/deserts/dessert2.jpg",
                            Name = "Mille-feuille",
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 103,
                            CategoryId = 1,
                            Description = "Ніжне мигдалеве печиво з кремовою начинкою різних смаків.",
                            ImageUrl = "/images/deserts/dessert3.jpg",
                            Name = "Macaron",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 104,
                            CategoryId = 1,
                            Description = "Шоколадний торт з рідкою гарячою начинкою всередині.",
                            ImageUrl = "/images/deserts/dessert4.jpg",
                            Name = "Fondant au chocolat",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 105,
                            CategoryId = 1,
                            Description = "Запечений крем з карамелізованою хрусткою скоринкою.",
                            ImageUrl = "/images/deserts/dessert5.jpg",
                            Name = "Crème brûlée",
                            Price = 170.00m
                        },
                        new
                        {
                            Id = 106,
                            CategoryId = 1,
                            Description = "Французька запіканка з вишнями, ніжна і ароматна.",
                            ImageUrl = "/images/deserts/dessert6.jpg",
                            Name = "Clafoutis",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 107,
                            CategoryId = 1,
                            Description = "Ніжний заварний крем з білковими 'острівцями', що плавають на ванільному соусі.",
                            ImageUrl = "/images/deserts/dessert7.jpg",
                            Name = "Île flottante",
                            Price = 155.00m
                        },
                        new
                        {
                            Id = 108,
                            CategoryId = 1,
                            Description = "Традиційний французький слойонуватий круасан з ніжним масляним смаком.",
                            ImageUrl = "/images/deserts/dessert8.jpg",
                            Name = "Croissant",
                            Price = 90.00m
                        },
                        new
                        {
                            Id = 201,
                            CategoryId = 2,
                            Description = "Традиційний французький рибний суп з прянощами та морепродуктами.",
                            ImageUrl = "/images/main-dish/main1.jpg",
                            Name = "Bouillabaisse",
                            Price = 320.00m
                        },
                        new
                        {
                            Id = 202,
                            CategoryId = 2,
                            Description = "Філе форелі, обсмажене з вершковим соусом та лимоном.",
                            ImageUrl = "/images/main-dish/main2.jpg",
                            Name = "Truite Meunière",
                            Price = 280.00m
                        },
                        new
                        {
                            Id = 203,
                            CategoryId = 2,
                            Description = "Солень зі смаженим лимонним соусом, класика французької кухні.",
                            ImageUrl = "/images/main-dish/main3.jpg",
                            Name = "Sole Meunière",
                            Price = 350.00m
                        },
                        new
                        {
                            Id = 204,
                            CategoryId = 2,
                            Description = "Філе лосося, запечене у пергаменті з овочами та травами.",
                            ImageUrl = "/images/main-dish/main4.jpg",
                            Name = "Salmon en Papillote",
                            Price = 340.00m
                        },
                        new
                        {
                            Id = 205,
                            CategoryId = 2,
                            Description = "Курка, тушкована в червоному вині з грибами та цибулею.",
                            ImageUrl = "/images/main-dish/main5.jpg",
                            Name = "Coq au Vin",
                            Price = 300.00m
                        },
                        new
                        {
                            Id = 206,
                            CategoryId = 2,
                            Description = "Тушкована яловичина з вином, овочами та ароматними травами.",
                            ImageUrl = "/images/main-dish/main6.jpg",
                            Name = "Boeuf Bourguignon",
                            Price = 380.00m
                        },
                        new
                        {
                            Id = 207,
                            CategoryId = 2,
                            Description = "Качка з апельсиновим соусом — класичне поєднання солодкого та солоного.",
                            ImageUrl = "/images/main-dish/main7.jpg",
                            Name = "Duck à l'Orange",
                            Price = 390.00m
                        },
                        new
                        {
                            Id = 208,
                            CategoryId = 2,
                            Description = "Запечена овочева рататуй з ніжним ягням.",
                            ImageUrl = "/images/main-dish/main8.jpg",
                            Name = "Ratatouille with Lamb",
                            Price = 370.00m
                        },
                        new
                        {
                            Id = 401,
                            CategoryId = 3,
                            Description = "Традиційний французький салат з тунцем, яйцями та оливками.",
                            ImageUrl = "/images/appetizers/appetizer1.jpg",
                            Name = "Salade Niçoise",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 402,
                            CategoryId = 3,
                            Description = "Салат з беконом, яйцем пашот та гірчичною заправкою.",
                            ImageUrl = "/images/appetizers/appetizer2.jpg",
                            Name = "Salade Lyonnaise",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 403,
                            CategoryId = 3,
                            Description = "Салат із теплою козячою бринзою на тості.",
                            ImageUrl = "/images/appetizers/appetizer3.jpg",
                            Name = "Salade de Chèvre Chaud",
                            Price = 170.00m
                        },
                        new
                        {
                            Id = 404,
                            CategoryId = 3,
                            Description = "Простий морквяний салат з лимонною заправкою.",
                            ImageUrl = "/images/appetizers/appetizer4.jpg",
                            Name = "Salade de Carottes Râpées",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 405,
                            CategoryId = 3,
                            Description = "Французький цибульний суп з грінками та сиром.",
                            ImageUrl = "/images/appetizers/appetizer5.jpg",
                            Name = "Soupe à l'oignon",
                            Price = 140.00m
                        },
                        new
                        {
                            Id = 406,
                            CategoryId = 3,
                            Description = "Легкий курячий бульйон з ароматними травами.",
                            ImageUrl = "/images/appetizers/appetizer6.jpg",
                            Name = "Bouillon Blanc",
                            Price = 130.00m
                        },
                        new
                        {
                            Id = 407,
                            CategoryId = 3,
                            Description = "Зелений гороховий крем-суп.",
                            ImageUrl = "/images/appetizers/appetizer7.jpg",
                            Name = "Potage Saint-Germain",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 408,
                            CategoryId = 3,
                            Description = "Гарбузовий крем-суп з ніжним смаком.",
                            ImageUrl = "/images/appetizers/appetizer8.jpg",
                            Name = "Velouté de Potiron",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 301,
                            CategoryId = 4,
                            Description = "Свіжий лимонад з м’ятою та льодом.",
                            ImageUrl = "/images/drinks/drink1.jpg",
                            Name = "Citron Pressé",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 302,
                            CategoryId = 4,
                            Description = "Газований апельсиновий напій — класика Франції.",
                            ImageUrl = "/images/drinks/drink2.jpg",
                            Name = "Orangina",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 303,
                            CategoryId = 4,
                            Description = "Фруктовий сидр з яблук, солодкий та освіжаючий.",
                            ImageUrl = "/images/drinks/drink3.jpg",
                            Name = "Pommeau",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 304,
                            CategoryId = 4,
                            Description = "Французька кава з гарячим молоком.",
                            ImageUrl = "/images/drinks/drink4.jpg",
                            Name = "Café au lait",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 305,
                            CategoryId = 4,
                            Description = "Ігристе вино з регіону Шампань, класика святкових моментів.",
                            ImageUrl = "/images/drinks/drink5.jpg",
                            Name = "Champagne",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 306,
                            CategoryId = 4,
                            Description = "Коктейль із шампанського та чорносмородинового лікеру.",
                            ImageUrl = "/images/drinks/drink6.jpg",
                            Name = "Kir Royale",
                            Price = 280.00m
                        },
                        new
                        {
                            Id = 307,
                            CategoryId = 4,
                            Description = "Анісовий алкогольний напій, популярний у південній Франції.",
                            ImageUrl = "/images/drinks/drink7.jpg",
                            Name = "Pastis",
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 308,
                            CategoryId = 4,
                            Description = "Витриманий французький бренді з багатим ароматом.",
                            ImageUrl = "/images/drinks/drink8.jpg",
                            Name = "Cognac",
                            Price = 300.00m
                        });
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ExtraPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OptionGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionGroupId");

                    b.ToTable("MenuItemOptions");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItemOptionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemOptionGroups");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.OrderItemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemOptionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemOptionId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemOptions");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.Category", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItem", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItemOption", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.MenuItemOptionGroup", "OptionGroup")
                        .WithMany("Options")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItemOptionGroup", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.MenuItem", "MenuItem")
                        .WithMany("OptionGroups")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.Order", b =>
                {
                    b.HasOne("Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.OrderItem", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CozyCafe.Models.Domain.Common.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.OrderItemOption", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.MenuItemOption", "MenuItemOption")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("MenuItemOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozyCafe.Models.Domain.Common.OrderItem", "OrderItem")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItemOption");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.Cart", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("CozyCafe.Models.Domain.ForUser.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.CartItem", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.ForUser.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozyCafe.Models.Domain.Admin.MenuItem", "MenuItem")
                        .WithMany("CartItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.Review", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.Admin.MenuItem", "MenuItem")
                        .WithMany("Reviews")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CozyCafe.Models.Domain.ForUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.Category", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItem", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OptionGroups");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItemOption", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Admin.MenuItemOptionGroup", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.Common.OrderItem", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CozyCafe.Models.Domain.ForUser.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
